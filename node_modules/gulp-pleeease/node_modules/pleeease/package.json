{
  "name": "pleeease",
  "version": "0.4.4",
  "description": "Postprocess CSS with ease",
  "author": {
    "name": "Vincent De Oliveira"
  },
  "main": "./lib/index",
  "bin": {
    "pleeease": "./bin/pleeease",
    "pleeease-compile": "./bin/pleeease-compile",
    "pleeease-watch": "./bin/pleeease-watch"
  },
  "keywords": [
    "postprocessor",
    "css",
    "postcss",
    "pleeease"
  ],
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "dependencies": {
    "postcss": "^2.0.0",
    "csswring": "~0.1.0",
    "postcss-vars": "~0.1.0",
    "autoprefixer": "^2.0.0",
    "css-mqpacker": "~0.1.0",
    "pixrem": "https://github.com/iamvdo/node-pixrem/tarball/master",
    "pleeease-filters": "~0.1.0",
    "deep-extend": "~0.2.8",
    "commander": "~2.2.0",
    "multi-glob": "~0.4.0",
    "mkdirp": "~0.4.0",
    "chokidar": "~0.8.2",
    "colors": "~0.6.2"
  },
  "devDependencies": {
    "gulp": "3.8.6",
    "browserify": "~5.0.0",
    "gulp-jshint": "~1.7.1",
    "gulp-uglify": "~0.3.1",
    "jshint-stylish": "~0.4.0",
    "gulp-streamify": "~0.0.4",
    "vinyl-source-stream": "~0.1.1",
    "gulp-bump": "~0.1.10",
    "run-sequence": "~0.3.6",
    "fs-extra": "~0.10.0",
    "yargs": "~1.2.6",
    "mocha": "~1.20.1",
    "gulp-mocha": "~0.5.1"
  },
  "readme": "Pleeease\n======\n\nPostprocess CSS with ease.\n\nPleeease is a CSS post-processor. The main goal of this tool is to **perform all treatments that a pre-processor shouldn't have to do!** (eg, dealing with prefixes, convert `rem` to `px`, support older browsers, etc.).\n\n***Pleeease* is also a great tool if you want to write DRY, future-proof CSS.**\n\nFor now, it adds **prefixes**, **variables**, **pseudo-elements** and **`rem`** unit support, **converts CSS shorthand filters to SVG equivalent**, **packs same media-query** in one `@media` rule, **inlines `@import`** styles and **minifies the result**.\n\nPleeease is based on [PostCSS](https://github.com/ai/postcss) postprocessor.\n\nhttp://pleeease.io\n\n##Example\n\nYou write `foo.css`:\n\n```css\n@import url(\"bar.css\");\n*,\n*::after,\n*::before {\n\tbox-sizing: border-box;\n}\n:root {\n\t--color-primary: red;\n\t--color-secondary: blue;\n}\n.elem {\n\tfont-size: 2rem;\n\tbackground: var(--color-primary);\n\twidth: calc(100% - 50px);\n\tfilter: blur(4px);\n}\n@media screen and (min-width: 36em) {\n\t.elem {\n\t\tcolor: var(--color-secondary)\n\t}\n}\n@media screen and (min-width: 36em) {\n\t.classe {\n\t\tbackground: linear-gradient(green, blue);\n\t}\n}\n```\n\nYou get `baz.css` (with all options set to `true`, except `minifier`)\n\n```css\n.bar {\n\t/* imported styles */\n}\n/* pseudo-elements are converted */\n*,\n*:after,\n*:before {\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n:root {\n\t--color-primary: red;\n\t--color-secondary: blue;\n}\n.elem {\n\tfont-size: 32px; /* fallback for rem support */\n\tfont-size: 2rem;\n\tbackground: red; /* resolve variables */\n\twidth: -webkit-calc(100% - 50px); /* add prefixes */\n\twidth: calc(100% - 50px);\n\tfilter: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"filter\"><feGaussianBlur stdDeviation=\"4\" /></filter></svg>#filter');\n\t-webkit-filter: blur(4px);\n\t        filter: blur(4px);\n}\n/* pack same media-queries */\n@media screen and (min-width: 36em) {\n\t.elem {\n\t\tcolor: blue\n\t}\n\t.classe {\n\t\tbackground: -webkit-gradient(linear, left top, left bottom, from(green), to(blue));\n\t\tbackground: -webkit-linear-gradient(green, blue);\n\t\tbackground: linear-gradient(green, blue);\n\t}\n}\n```\n\n##Installation\n\n\t$ npm install pleeease\n\n##Usage\n\n###Programmatic\n\n```javascript\nvar pleeease = require('pleeease'),\n\tfs       = require('fs');\n\nvar css = fs.readFileSync('app.css', 'utf8');\n\n// define options here\nvar options = {};\n\nvar fixed = pleeease.process(css, options);\n\nfs.writeFile('app.min.css', fixed, function (err) {\n  if (err) {\n    throw err;\n  }\n  console.log('File saved!');\n});\n```\n\n###CLI\n\nInstall Pleeease globally\n\n\t$ npm install -g pleeease\n\nOr use alternate syntax\n\n\t$ node ./bin/pleeease\n\nCompile all CSS files from the root projet to `app.min.css`\n\n\t$ pleeease compile\n\t$ pleeease compile *.css to app.min.css\n\nCompile `foo.css` to `bar.css`\n\n\t$ pleeease compile foo.css to bar.css\n\nCompile multiple files to `app.min.css`\n\n\t$ pleeease compile foo.css bar.css\n\nCompile `css/` folder to `public/css/app.min.css` (if folders doesn't exist, they will be created)\n\n\t$ pleeease compile css/ to public/css/app.min.css\n\nYou can also `watch` (with the same syntax) for live compilation.\n\n\t$ pleeease watch foo.css\n\nPleeease options can be set in a `.pleeeaserc` file (JSON-like), for example:\n\n```javascript\n{\n\t\"in\": [\"foo.css\"],\n\t\"out\": \"bar.css\",\n\t\"fallbacks\": {\n\t\t\"autoprefixer\": true\n\t},\n\t\"optimizers\": {\n\t\t\"minifier\": false\n\t}\n}\n```\n\n* `in` is an array of files (default `[*.css]`)\n* `out` is the path to the compiled file (default `app.min.css`)\n\nFor other options, see below.\n\n###With Brunch\n\nIf you're using [Brunch](http://brunch.io), see [pleeease-brunch](https://github.com/iamvdo/pleeease-brunch)\n\n##Options\n\nThese are the default options for now:\n\n* `fallbacks`:\n\t* `autoprefixer`: `true`\n\t* `variables`: `true`\n\t* `filters`: `true`\n\t* `rem`: `true`\n\t* `pseudoElements`: `true`\n* `optimizers`:\n\t* `import`: `true`\n\t* `minifier`: `true`\n\t* `mqpacker`: `true`\n\nAll options can be disabled with `false` keyword or modified using each postprocessor options.\n\n###fallbacks.autoprefixer\n\nAdds support for [Autoprefixer](https://github.com/ai/autoprefixer) that add vendor prefixes to CSS. Add options as an array:\n\n```javascript\n// set options\nvar options = {\n\tfallbacks: {\n\t\tautoprefixer: ['last 4 versions', 'Android 2.3']\n\t}\n}\n```\n\n```javascript\n// .pleeeaserc file\n{\n\t\"fallbacks\": {\n\t\t\"autoprefixer\": [\"last 4 versions\", \"Android 2.3\"]\n\t}\n}\n```\n\nSee [available options for Autoprefixer](https://github.com/ai/autoprefixer#browsers).\n\n###fallbacks.variables\n\nAdds support for a \"not so bad\" [CSS variables polyfill](https://github.com/iamvdo/postcss-vars). There are no options.\n\n###fallbacks.filters\n\nConverts CSS shorthand filters to SVG equivalent. Uses [pleeease-filters](https://github.com/iamvdo/pleeease-filters). You can also force IE filters with an option:\n\n```javascript\n// set options\nvar options = {\n\tfallbacks: {\n\t\tfilters: {oldIE: true}\n\t}\n}\n```\n\n```javascript\n// .pleeeaserc file\n{\n\t\"fallbacks\": {\n\t\t\"filters\": {\"oldIE\": true}\n\t}\n}\n```\n\n**Be careful**, not all browsers support CSS or SVG filters. For your information, latest WebKit browsers support CSS shorthand, Firefox support SVG filters and IE9- support IE filters (limited and slightly degraded). **It means that IE10+, Opera Mini and Android browsers have no support at all.**\n\n###fallbacks.rem\n\nAdds support for [pixrem](https://github.com/iamvdo/node-pixrem) that generates pixel fallbacks for rem units. Add options as an array:\n\n```javascript\n// set options\nvar options = {\n\tfallbacks: {\n\t\trem: ['16px', {replace: true}]\n\t}\n}\n```\n\n```javascript\n// .pleeeaserc file\n{\n\t\"fallbacks\": {\n\t\t\"rem\": [\"16px\", {\"replace\": true}]\n\t}\n}\n```\n\nSee [available options for pixrem](https://github.com/iamvdo/node-pixrem#parameters).\n\nFor now, this uses a fork from [pixrem](https://github.com/robwierzbowski/node-pixrem) until the [PR will be accepted or not](https://github.com/robwierzbowski/node-pixrem/pull/10).\n\n###fallbacks.pseudoElements\n\nConverts pseudo-elements using CSS3 syntax (two-colons notation like `::after`, `::before`, `::first-line` and `::first-letter`) with the old one, using only one colon (useful for IE8 support).\n\n```css\n.element::after {\n\t/* you write */\n}\n```\n\n```css\n.element:after {\n\t/* you get */\n}\n```\n\n###optimizers.import\n\nInlines `@import` styles with relative paths (absolute ones will be unaffected). `@import` including media-queries are not changed either.\n\nYou can use the CSS syntax you want:\n\n```css\n@import \"file.css\";\n@import url(file.css);\n@import url(\"http://foo.com/bar.css\"); /* not imported */\n@import url(\"file.css\") screen and (max-width: 35em); /* not imported */\n```\n\nNote that you can set the \"root\" folder for imported files, even if this is not the root of your project (default is `process.cwd()`). For example, if you compile `css/foo.css` containing an `@import` to `import.css` (so, in the same folder `css`), set options like this:\n\n```javascript\n// .pleeeaserc file\n{\n\t\"optimizers\": {\n\t\t\"import\": \"css\"\n\t}\n}\n```\n\n###optimizers.minifier\n\nAdds support for [CSS Wring](https://github.com/hail2u/node-csswring), a CSS minifier. There are no options.\n\n###optimizers.mqpacker\n\nAdds support for [MQ Packer](https://github.com/hail2u/node-css-mqpacker) that pack same CSS media query rules into one media query rule. There are no options.\n\n##Sourcemaps\n\nPleeease supports sourcemaps from CSS (disabled by default). Enabled them in `.pleeeaserc` file:\n\n```javascript\n// .pleeeaserc file\n{\n\t\"sourcemaps\": true\n}\n```\n\n##More\n\nMore postprocess tasks are coming, mainly fallbacks. If you need absolutely one, open an issue, or contribute!\n\n##Licence\n\nMIT Â© 2014 [Vincent De Oliveira &middot; iamvdo](https://github.com/iamvdo)\n",
  "readmeFilename": "README.md",
  "_id": "pleeease@0.4.4",
  "dist": {
    "shasum": "62b5ff33e410fcd23da2be00e00363e455a8354c"
  },
  "_from": "pleeease@~0.4.1",
  "_resolved": "https://registry.npmjs.org/pleeease/-/pleeease-0.4.4.tgz"
}
